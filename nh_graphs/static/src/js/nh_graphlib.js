// Generated by CoffeeScript 1.8.0
(function() {
  var NHContext, NHFocus, NHGraph, NHGraphLib, NHTable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NHGraphLib = (function() {
    function NHGraphLib(element) {
      this.mobile_time_end_change = __bind(this.mobile_time_end_change, this);
      this.mobile_time_start_change = __bind(this.mobile_time_start_change, this);
      this.mobile_date_end_change = __bind(this.mobile_date_end_change, this);
      this.mobile_date_start_change = __bind(this.mobile_date_start_change, this);
      this.leading_zero = __bind(this.leading_zero, this);
      this.date_to_string = __bind(this.date_to_string, this);
      this.date_from_string = __bind(this.date_from_string, this);
      var self;
      this.style = {
        margin: {
          top: 40,
          right: 0,
          left: 0,
          bottom: 40
        },
        padding: {
          top: 10,
          right: 30,
          left: 40,
          bottom: 40
        },
        dimensions: {
          height: 0,
          width: 0
        },
        label_gap: 10,
        transition_duration: 1e3,
        axis_label_text_height: 10,
        time_padding: null
      };
      this.patient = {
        id: 0,
        name: ''
      };
      this.options = {
        mobile: {
          is_mob: false,
          date_range: {
            portrait: 1,
            landscape: 5
          }
        },
        controls: {
          date: {
            start: null,
            end: null
          },
          time: {
            start: null,
            end: null
          },
          rangify: null
        }
      };
      this.el = element ? element : null;
      this.popup = null;
      this.data = {
        raw: null,
        extent: {
          end: null,
          start: null
        }
      };
      this.obj = null;
      this.context = null;
      this.focus = null;
      self = this;
    }

    NHGraphLib.prototype.date_from_string = function(date_string) {
      return new Date(date_string);
    };

    NHGraphLib.prototype.date_to_string = function(date) {
      var days;
      days = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"];
      return days[date.getDay()] + " " + +date.getDate() + '/' + this.leading_zero(date.getMonth() + 1) + "/" + this.leading_zero(date.getFullYear()) + " " + this.leading_zero(date.getHours()) + ":" + this.leading_zero(date.getMinutes());
    };

    NHGraphLib.prototype.leading_zero = function(date_element) {
      return ("0" + date_element).slice(-2);
    };

    NHGraphLib.prototype.mobile_date_start_change = function(event) {
      return console.log(event.srcElement.value);
    };

    NHGraphLib.prototype.mobile_date_end_change = function(event) {
      return console.log(event.srcElement.value);
    };

    NHGraphLib.prototype.mobile_time_start_change = function(event) {
      return console.log(event.srcElement.value);
    };

    NHGraphLib.prototype.mobile_time_end_change = function(event) {
      return console.log(event.srcElement.value);
    };

    NHGraphLib.prototype.init = function() {
      var container_el, end, self, start, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (this.el != null) {
        container_el = nh_graphs.select(this.el);
        this.style.dimensions.width = (container_el != null ? (_ref = container_el[0]) != null ? _ref[0].clientWidth : void 0 : void 0) - (this.style.margin.left + this.style.margin.right);
        this.obj = container_el.append('svg');
        start = this.date_from_string(this.data.raw[0]['date_terminated']);
        end = this.date_from_string(this.data.raw[this.data.raw.length - 1]['date_terminated']);
        if (!this.style.time_padding) {
          this.style.time_padding = ((end - start) / this.style.dimensions.width) / 1000;
        }
        start.setMinutes(start.getMinutes() - this.style.time_padding);
        this.data.extent.start = start;
        end.setMinutes(end.getMinutes() + this.style.time_padding);
        this.data.extent.end = end;
        if ((_ref1 = this.context) != null) {
          _ref1.init(this);
        }
        if ((_ref2 = this.focus) != null) {
          _ref2.init(this);
        }
        this.obj.attr('width', this.style.dimensions.width);
        this.obj.attr('height', this.style.dimensions.height);
        this.popup = document.createElement('div');
        this.popup.setAttribute('class', 'hidden');
        this.popup.setAttribute('id', 'chart_popup');
        document.getElementsByTagName('body')[0].appendChild(this.popup);
        self = this;
        if ((_ref3 = this.options.controls.date.start) != null) {
          _ref3.addEventListener('change', function(event) {
            var current_date, dates, new_date;
            current_date = self.focus.axes.x.min;
            dates = event.srcElement.value.split('-');
            new_date = current_date.setFullYear(dates[0], dates[1], dates[2]);
            return self.focus.redraw([new_date, self.focus.axes.x.max]);
          });
        }
        if ((_ref4 = this.options.controls.date.end) != null) {
          _ref4.addEventListener('change', function(event) {
            var current_date, dates, new_date;
            current_date = self.focus.axes.x.max;
            dates = event.srcElement.value.split('-');
            new_date = current_date.setFullYear(dates[0], dates[1], dates[2]);
            return self.focus.redraw([self.focus.axes.x.min, new_date]);
          });
        }
        if ((_ref5 = this.options.controls.time.start) != null) {
          _ref5.addEventListener('change', function(event) {
            var current_date, new_time, time;
            current_date = self.focus.axes.x.min;
            time = event.srcElement.value.split(':');
            new_time = current_date.setHours(time[0], time[1]);
            return self.focus.redraw([new_time, self.focus.axes.x.max]);
          });
        }
        if ((_ref6 = this.options.controls.time.end) != null) {
          _ref6.addEventListener('change', function(event) {
            var current_date, new_time, time;
            current_date = self.focus.axes.x.max;
            time = event.srcElement.value.split(':');
            new_time = current_date.setHours(time[0], time[1]);
            return self.focus.redraw([self.focus.axes.x.min, new_time]);
          });
        }
        window.addEventListener('resize', function(event) {
          var context_event, _ref7;
          self.style.dimensions.width = (container_el != null ? (_ref7 = container_el[0]) != null ? _ref7[0].clientWidth : void 0 : void 0) - (self.style.margin.left + self.style.margin.right);
          self.obj.attr('width', self.style.dimensions.width);
          context_event = document.createEvent('HTMLEvents');
          context_event.initEvent('context_resize', true, true);
          return window.dispatchEvent(context_event);
        });
      } else {
        throw new Error('No element specified');
      }
    };

    NHGraphLib.prototype.draw = function() {
      var _ref, _ref1;
      if ((_ref = this.context) != null) {
        _ref.draw(this);
      }
      return (_ref1 = this.focus) != null ? _ref1.draw(this) : void 0;
    };

    return NHGraphLib;

  })();

  if (!window.NH) {
    window.NH = {};
  }

  window.NH.NHGraphLib = NHGraphLib;

  NHContext = (function() {
    function NHContext() {
      this.init = __bind(this.init, this);
      this.leading_zero = __bind(this.leading_zero, this);
      var self;
      this.style = {
        margin: {
          top: 50,
          left: 0,
          right: 0,
          bottom: 20
        },
        padding: {
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
        },
        dimensions: {
          height: 0,
          width: 0
        }
      };
      this.graph = null;
      this.axes = {
        x: {
          scale: null,
          axis: null,
          min: 0,
          max: 0
        },
        y: {
          scale: null,
          axis: null,
          min: 0,
          max: 0
        }
      };
      this.parent_obj = null;
      this.brush = null;
      self = this;
    }

    NHContext.prototype.leading_zero = function(date_element) {
      return ("0" + date_element).slice(-2);
    };

    NHContext.prototype.init = function(parent_svg) {
      var left_offset, self;
      if (parent_svg != null) {
        this.parent_obj = parent_svg;
        this.obj = parent_svg.obj.append('g');
        this.obj.attr('class', 'nhcontext');
        left_offset = parent_svg.style.padding.left + this.style.margin.left;
        this.obj.attr('transform', 'translate(' + left_offset + ',' + (parent_svg.style.padding.top + this.style.margin.top) + ')');
        this.style.dimensions.width = parent_svg.style.dimensions.width - ((parent_svg.style.padding.left + parent_svg.style.padding.right) + (this.style.margin.left + this.style.margin.right));
        this.obj.attr('width', this.style.dimensions.width);
        this.axes.x.min = parent_svg.data.extent.start;
        this.axes.x.max = parent_svg.data.extent.end;
        this.axes.x.scale = nh_graphs.time.scale().domain([this.axes.x.min, this.axes.x.max]).range([left_offset, this.style.dimensions.width]);
        this.graph.init(this);
        this.style.dimensions.height += this.graph.style.dimensions.height + (this.graph.style.axis.x.size.height * 2);
        parent_svg.style.dimensions.height += this.style.dimensions.height + (this.style.margin.top + this.style.margin.bottom);
        this.graph.drawables.brush = this.graph.obj.append('g').attr('class', 'brush-container');
        self = this;
        this.brush = nh_graphs.svg.brush().x(this.graph.axes.x.scale).on("brush", function(context) {
          var new_extent_end, new_extent_start, _ref, _ref1, _ref2, _ref3;
          if (context == null) {
            context = self;
          }
          new_extent_start = nh_graphs.event.target.extent()[0];
          new_extent_end = nh_graphs.event.target.extent()[1];
          if (new_extent_start.getTime() === new_extent_end.getTime()) {
            new_extent_start = context.axes.x.min;
            new_extent_end = context.axes.x.max;
            context.parent_obj.focus.redraw([context.axes.x.min, context.axes.x.max]);
          } else {
            context.parent_obj.focus.redraw(nh_graphs.event.target.extent());
          }
          if ((_ref = self.parent_obj.options.controls.date.start) != null) {
            _ref.value = new_extent_start.getFullYear() + '-' + self.leading_zero(new_extent_start.getMonth() + 1) + '-' + self.leading_zero(new_extent_start.getDate());
          }
          if ((_ref1 = self.parent_obj.options.controls.date.end) != null) {
            _ref1.value = new_extent_end.getFullYear() + '-' + self.leading_zero(new_extent_end.getMonth() + 1) + '-' + self.leading_zero(new_extent_end.getDate());
          }
          if ((_ref2 = self.parent_obj.options.controls.time.start) != null) {
            _ref2.value = self.leading_zero(new_extent_start.getHours()) + ':' + self.leading_zero(new_extent_start.getMinutes());
          }
          return (_ref3 = self.parent_obj.options.controls.time.end) != null ? _ref3.value = self.leading_zero(new_extent_end.getHours()) + ':' + self.leading_zero(new_extent_end.getMinutes()) : void 0;
        });
        this.graph.drawables.brush.append("g").attr("class", "x brush").call(this.brush).selectAll("rect").attr("y", 0).attr("height", this.graph.style.dimensions.height);
        self = this;
        window.addEventListener('context_resize', function(event) {
          var d, graph_event, new_date, _ref, _ref1, _ref2, _ref3, _ref4;
          self.style.dimensions.width = self.parent_obj.style.dimensions.width - ((self.parent_obj.style.padding.left + self.parent_obj.style.padding.right) + (self.style.margin.left + self.style.margin.right));
          self.obj.attr('width', self.style.dimensions.width);
          if ((_ref = self.axes.x.scale) != null) {
            _ref.range()[1] = self.style.dimensions.width;
          }
          graph_event = document.createEvent('HTMLEvents');
          graph_event.initEvent('focus_resize', true, true);
          window.dispatchEvent(graph_event);
          if (self.parent_obj.options.mobile.is_mob) {
            new_date = new Date(self.axes.x.max);
            if (window.innerWidth > window.innerHeight) {
              d = new_date.getDate() - self.parent_obj.options.mobile.date_range.landscape;
              new_date.setDate(d);
              self.graph.axes.x.scale.domain([new_date, self.axes.x.max]);
            } else {
              d = new_date.getDate() - self.parent_obj.options.mobile.date_range.portrait;
              new_date.setDate(d);
              self.graph.axes.x.scale.domain([new_date, self.axes.x.max]);
            }
            if ((_ref1 = self.parent_obj.options.controls.date.start) != null) {
              _ref1.value = new_date.getFullYear() + '-' + self.leading_zero(new_date.getMonth() + 1) + '-' + self.leading_zero(new_date.getDate());
            }
            if ((_ref2 = self.parent_obj.options.controls.date.end) != null) {
              _ref2.value = self.axes.x.max.getFullYear() + '-' + self.leading_zero(self.axes.x.max.getMonth() + 1) + '-' + self.leading_zero(self.axes.x.max.getDate());
            }
            if ((_ref3 = self.parent_obj.options.controls.time.start) != null) {
              _ref3.value = self.leading_zero(new_date.getHours()) + ':' + self.leading_zero(new_date.getMinutes());
            }
            if ((_ref4 = self.parent_obj.options.controls.time.end) != null) {
              _ref4.value = self.leading_zero(self.axes.x.max.getHours()) + ':' + self.leading_zero(self.axes.x.max.getMinutes());
            }
          }
          self.graph.axes.x.scale.range([0, self.style.dimensions.width - self.graph.style.label_width]);
          self.graph.axes.x.axis.ticks(self.style.dimensions.width / 70);
          return self.graph.redraw(this);
        });
      } else {
        throw new Error('Context init being called before SVG initialised');
      }
    };

    NHContext.prototype.draw = function(parent_svg) {
      this.graph.draw(this);
    };

    return NHContext;

  })();

  if (!window.NH) {
    window.NH = {};
  }

  window.NH.NHContext = NHContext;

  NHFocus = (function() {
    function NHFocus() {
      this.redraw = __bind(this.redraw, this);
      this.draw = __bind(this.draw, this);
      this.init = __bind(this.init, this);
      var self;
      this.style = {
        spacing: 20,
        margin: {
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
        },
        padding: {
          top: 20,
          left: 0,
          right: 0,
          bottom: 20
        },
        dimensions: {
          height: 0,
          width: 0
        }
      };
      this.graphs = new Array();
      this.tables = new Array();
      this.axes = {
        x: {
          scale: null,
          axis: null,
          min: 0,
          max: 0
        },
        y: {
          scale: null,
          axis: null,
          min: 0,
          max: 0
        }
      };
      this.parent_obj = null;
      self = this;
    }

    NHFocus.prototype.init = function(parent_svg) {
      var graph, self, table, _i, _j, _len, _len1, _ref, _ref1;
      if (parent_svg != null) {
        this.parent_obj = parent_svg;
        this.obj = parent_svg.obj.append('g');
        this.obj.attr('class', 'nhfocus');
        if (parent_svg.context != null) {
          this.obj.attr('transform', 'translate(' + (parent_svg.style.padding.left + this.style.margin.left) + ',' + (((parent_svg.context.style.dimensions.height + parent_svg.context.style.margin.bottom) + parent_svg.style.padding.top) + this.style.margin.top) + ')');
        } else {
          this.obj.attr('transform', 'translate(' + (parent_svg.style.padding.left + this.style.margin.left) + ',' + (parent_svg.style.padding.top + this.style.margin.top) + ')');
        }
        this.style.dimensions.width = parent_svg.style.dimensions.width - ((parent_svg.style.padding.left + parent_svg.style.padding.right) + (this.style.margin.left + this.style.margin.right));
        this.obj.attr('width', this.style.dimensions.width);
        this.axes.x.min = parent_svg.data.extent.start;
        this.axes.x.max = parent_svg.data.extent.end;
        _ref = this.graphs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          graph = _ref[_i];
          graph.init(this);
          this.style.dimensions.height += graph.style.dimensions.height + this.style.spacing;
        }
        _ref1 = this.tables;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          table = _ref1[_j];
          table.init(this);
        }
        parent_svg.style.dimensions.height += this.style.dimensions.height + (this.style.margin.top + this.style.margin.bottom);
        self = this;
        return window.addEventListener('focus_resize', function(event) {
          var d, new_date, _ref2;
          self.style.dimensions.width = self.parent_obj.style.dimensions.width - ((self.parent_obj.style.padding.left + self.parent_obj.style.padding.right) + (self.style.margin.left + self.style.margin.right));
          self.obj.attr('width', self.style.dimensions.width);
          if ((_ref2 = self.axes.x.scale) != null) {
            _ref2.range()[1] = self.style.dimensions.width;
          }
          if (self.parent_obj.options.mobile.is_mob) {
            if (window.innerWidth > window.innerHeight) {
              new_date = new Date(self.axes.x.max);
              d = new_date.getDate() - self.parent_obj.options.mobile.date_range.landscape;
              new_date.setDate(d);
              return self.redraw([new_date, self.axes.x.max]);
            } else {
              new_date = new Date(self.axes.x.max);
              d = new_date.getDate() - self.parent_obj.options.mobile.date_range.portrait;
              new_date.setDate(d);
              return self.redraw([new_date, self.axes.x.max]);
            }
          } else {
            return self.redraw([self.axes.x.min, self.axes.x.max]);
          }
        });
      } else {
        throw new Error('Focus init being called before SVG initialised');
      }
    };

    NHFocus.prototype.draw = function(parent_svg) {
      var graph, table, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.graphs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        graph = _ref[_i];
        graph.draw(this);
      }
      _ref1 = this.tables;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        table = _ref1[_j];
        table.draw(this);
      }
    };

    NHFocus.prototype.redraw = function(extent) {
      var graph, table, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.graphs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        graph = _ref[_i];
        graph.axes.x.scale.domain([extent[0], extent[1]]);
        graph.axes.x.axis.ticks(this.style.dimensions.width / 70);
        graph.axes.x.scale.range([0, this.style.dimensions.width - graph.style.label_width]);
        graph.redraw(this);
      }
      _ref1 = this.tables;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        table = _ref1[_j];
        table.range = extent;
        table.redraw(this);
      }
    };

    return NHFocus;

  })();

  if (!window.NH) {
    window.NH = {};
  }

  window.NH.NHFocus = NHFocus;

  Array.prototype.min = function() {
    return Math.min.apply(null, this);
  };

  NHGraph = (function() {
    function NHGraph() {
      this.redraw = __bind(this.redraw, this);
      this.draw = __bind(this.draw, this);
      this.init = __bind(this.init, this);
      this.hide_popup = __bind(this.hide_popup, this);
      this.show_popup = __bind(this.show_popup, this);
      this.leading_zero = __bind(this.leading_zero, this);
      this.date_to_string = __bind(this.date_to_string, this);
      this.date_from_string = __bind(this.date_from_string, this);
      this.axes = {
        x: {
          scale: null,
          axis: null,
          min: 0,
          max: 0,
          obj: null
        },
        y: {
          scale: null,
          axis: null,
          min: 0,
          max: 0,
          obj: null,
          ranged_extent: null
        },
        obj: null
      };
      this.style = {
        dimensions: {
          height: 200,
          width: 0
        },
        margin: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        },
        padding: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        },
        axis: {
          x: {
            hide: false,
            size: null
          },
          y: {
            hide: false,
            size: null
          }
        },
        data_style: '',
        norm_style: '',
        axis_label_text_height: 10,
        axis_label_text_padding: 50,
        label_text_height: 18,
        label_width: 100,
        range: {
          cap: {
            height: 2,
            width: 9
          },
          width: 2
        }
      };
      this.options = {
        keys: new Array(),
        label: null,
        measurement: '',
        normal: {
          min: 0,
          max: 0,
          diff: 0
        }
      };
      this.drawables = {
        area: null,
        graph_object: null,
        data: null,
        initial_values: null,
        ranged_values: null,
        background: {
          obj: null,
          data: null
        },
        brush: null
      };
      this.obj = null;
      this.parent_obj = null;
    }

    NHGraph.prototype.date_from_string = function(date_string) {
      return new Date(date_string);
    };

    NHGraph.prototype.date_to_string = function(date) {
      var days;
      days = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"];
      return days[date.getDay()] + " " + +date.getDate() + '/' + this.leading_zero(date.getMonth() + 1) + "/" + this.leading_zero(date.getFullYear()) + " " + this.leading_zero(date.getHours()) + ":" + this.leading_zero(date.getMinutes());
    };

    NHGraph.prototype.leading_zero = function(date_element) {
      return ("0" + date_element).slice(-2);
    };

    NHGraph.prototype.show_popup = function(string, x, y) {
      var cp;
      cp = document.getElementById('chart_popup');
      cp.innerHTML = string;
      cp.style.top = y + 'px';
      cp.style.left = x + 'px';
      return cp.classList.remove('hidden');
    };

    NHGraph.prototype.hide_popup = function() {
      var cp;
      cp = document.getElementById('chart_popup');
      return cp.classList.add('hidden');
    };

    NHGraph.prototype.init = function(parent_obj) {
      var left_offset, line_self, self, top_offset, _ref;
      this.parent_obj = parent_obj;
      this.obj = parent_obj.obj.append('g');
      this.obj.attr('class', 'nhgraph');
      this.style.dimensions.width = parent_obj.style.dimensions.width - ((parent_obj.style.padding.left + parent_obj.style.padding.right) + (this.style.margin.left + this.style.margin.right)) - this.style.label_width;
      this.obj.attr('width', this.style.dimensions.width);
      left_offset = parent_obj.style.padding.left + this.style.margin.left;
      top_offset = parent_obj.style.dimensions.height + this.style.margin.top;
      this.drawables.background.obj = this.obj.append('g').attr('class', 'background');
      this.axes.obj = this.obj.append('g').attr('class', 'axes');
      this.drawables.data = this.obj.append('g').attr('class', 'data');
      this.axes.x.min = parent_obj.axes.x.min;
      this.axes.x.max = parent_obj.axes.x.max;
      this.axes.x.scale = nh_graphs.time.scale().domain([this.axes.x.min, this.axes.x.max]).range([left_offset, this.style.dimensions.width]);
      this.axes.x.axis = nh_graphs.svg.axis().scale(this.axes.x.scale).orient("top").ticks(this.style.dimensions.width / 70);
      if (!this.style.axis.x.hide) {
        this.axes.x.obj = this.axes.obj.append("g").attr("class", "x axis").call(this.axes.x.axis);
        line_self = this;
        this.axes.obj.selectAll(".x.axis g text").each(function(d) {
          var el, i, tspan, word, words, _i, _len;
          el = nh_graphs.select(this);
          words = line_self.date_to_string(d).split(" ");
          el.text("");
          for (i = _i = 0, _len = words.length; _i < _len; i = ++_i) {
            word = words[i];
            tspan = el.append("tspan").text(word);
            if (i > 0) {
              tspan.attr("x", 0).attr("dy", "15");
            }
          }
          return el.attr("y", "-" + (words.length * line_self.style.axis_label_text_height + line_self.style.axis_label_text_height));
        });
        this.style.axis.x.size = this.axes.x.obj[0][0].getBBox();
        this.style.dimensions.height -= this.style.axis.x.size.height;
      }
      this.obj.attr('height', this.style.dimensions.height);
      this.obj.append("defs").append("clipPath").attr("class", "clip").attr('id', this.options.keys.join('-') + '-clip').append("rect").attr("width", this.style.dimensions.width).attr("height", this.style.dimensions.height).attr("y", top_offset).attr("x", left_offset);
      this.axes.y.scale = nh_graphs.scale.linear().domain([this.axes.y.min, this.axes.y.max]).range([top_offset + this.style.dimensions.height, top_offset]);
      this.axes.y.axis = nh_graphs.svg.axis().scale(this.axes.y.scale).orient('left');
      if (!this.style.axis.y.hide) {
        this.axes.y.obj = this.axes.obj.append('g').attr('class', 'y axis').call(this.axes.y.axis);
        this.style.axis.y.size = this.axes.y.obj[0][0].getBBox();
      }
      self = this;
      this.axes.y.ranged_extent = nh_graphs.extent(self.parent_obj.parent_obj.data.raw, function(d) {
        var key;
        if (self.options.keys.length > 1) {
          return ((function() {
            var _i, _len, _ref, _results;
            _ref = self.options.keys;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              key = _ref[_i];
              _results.push(d[key]);
            }
            return _results;
          })()).min();
        } else {
          return d[self.options.keys[0]];
        }
      });
      if (this.options.label != null) {
        this.drawables.background.obj.append('text').text(this.options.label).attr({
          'x': this.style.dimensions.width + this.style.label_text_height,
          'y': this.axes.y.scale(this.axes.y.min) - (this.style.label_text_height * (this.options.keys.length + 1)),
          'class': 'label'
        });
        self = this;
        this.drawables.background.obj.selectAll('text.measurement').data(this.options.keys).enter().append('text').text(function(d, i) {
          if (i !== self.options.keys.length - 1) {
            return self.parent_obj.parent_obj.data.raw[self.parent_obj.parent_obj.data.raw.length - 1][d];
          } else {
            return self.parent_obj.parent_obj.data.raw[self.parent_obj.parent_obj.data.raw.length - 1][d] + ' ' + self.options.measurement;
          }
        }).attr({
          'x': self.style.dimensions.width + self.style.label_text_height,
          'y': function(d, i) {
            return self.axes.y.scale(self.axes.y.min) - (self.style.label_text_height * (self.options.keys.length - i));
          },
          'class': 'measurement'
        });
      }
      window.addEventListener('graph_resize', function(event) {
        var _ref;
        self.style.dimensions.width = self.parent_obj.style.dimensions.width - ((self.parent_obj.style.padding.left + self.parent_obj.style.padding.right) + (self.style.margin.left + self.style.margin.right)) - this.style.label_width;
        self.obj.attr('width', self.style.dimensions.width);
        if ((_ref = self.axes.x.scale) != null) {
          _ref.range()[1] = self.style.dimensions.width;
        }
        return self.redraw(self.parent_obj);
      });
      if ((_ref = self.parent_obj.parent_obj.options.controls.rangify) != null) {
        _ref.addEventListener('click', function(event) {
          if (event.srcElement.checked) {
            self.axes.y.scale.domain(self.axes.y.ranged_extent);
          } else {
            self.axes.y.scale.domain([self.axes.y.min, self.axes.y.max]);
          }
          return self.redraw(self.parent_obj);
        });
      }
    };

    NHGraph.prototype.draw = function(parent_obj) {
      var background_object, self, _i, _len, _ref;
      self = this;
      if (self.drawables.background.data != null) {
        _ref = self.drawables.background.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          background_object = _ref[_i];
          self.drawables.background.obj.selectAll(".range").data(self.drawables.background.data).enter().append("rect").attr({
            "class": function(d) {
              return d["class"] + ' range';
            },
            x: self.axes.x.scale(self.axes.x.scale.domain()[0]),
            y: function(d) {
              return self.axes.y.scale(d.e) - 1;
            },
            width: self.style.dimensions.width,
            "clip-path": "url(#" + self.options.keys.join('-') + '-clip' + ")",
            height: function(d) {
              return self.axes.y.scale(d.s) - (self.axes.y.scale(d.e) - 1);
            }
          });
        }
      }
      self.drawables.background.obj.selectAll('.normal').data([self.options.normal]).enter().append("rect").attr({
        'class': 'normal',
        'y': function(d) {
          return self.axes.y.scale(d.max);
        },
        'x': self.axes.x.scale(self.axes.x.scale.domain()[0]),
        'width': self.style.dimensions.width,
        'clip-path': 'url(#' + self.options.keys.join('-') + '-clip' + ')',
        'height': function(d) {
          return self.axes.y.scale(d.min) - (self.axes.y.scale(d.max));
        }
      });
      self.drawables.background.obj.selectAll(".grid.vertical").data(self.axes.x.scale.ticks()).enter().append("line").attr({
        "class": "vertical grid",
        x1: function(d) {
          return self.axes.x.scale(d);
        },
        x2: function(d) {
          return self.axes.x.scale(d);
        },
        y1: self.axes.y.scale.range()[1],
        y2: self.axes.y.scale.range()[0]
      });
      self.drawables.background.obj.selectAll(".grid.horizontal").data(self.axes.y.scale.ticks()).enter().append("line").attr({
        "class": "horizontal grid",
        x1: self.axes.x.scale(self.axes.x.scale.domain()[0]),
        x2: self.axes.x.scale(self.axes.x.scale.domain()[1]),
        y1: function(d) {
          return self.axes.y.scale(d);
        },
        y2: function(d) {
          return self.axes.y.scale(d);
        }
      });
      switch (self.style.data_style) {
        case 'stepped':
        case 'linear':
          self.drawables.area = nh_graphs.svg.line().interpolate(self.style.data_style === 'stepped' ? "step-after" : "linear").defined(function(d) {
            if (d.none_values === "[]") {
              return d;
            }
          }).x(function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated));
          }).y(function(d) {
            return self.axes.y.scale(d[self.options.keys[0]]);
          });
          self.drawables.data.append("path").datum(self.parent_obj.parent_obj.data.raw).attr("d", self.drawables.area).attr("clip-path", "url(#" + self.options.keys.join('-') + '-clip' + ")").attr("class", "path");
          self.drawables.data.selectAll(".point").data(self.parent_obj.parent_obj.data.raw.filter(function(d) {
            if (d.none_values === "[]") {
              return d;
            }
          })).enter().append("circle").attr("cx", function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated));
          }).attr("cy", function(d) {
            return self.axes.y.scale(d[self.options.keys[0]]);
          }).attr("r", 3).attr("class", "point").attr("clip-path", "url(#" + self.options.keys.join('-') + '-clip' + ")").on('mouseover', function(d) {
            return self.show_popup(d[self.options.keys[0]], event.pageX, event.pageY);
          }).on('mouseout', function(d) {
            return self.hide_popup();
          });
          return self.drawables.data.selectAll(".empty_point").data(self.parent_obj.parent_obj.data.raw.filter(function(d) {
            if (d.none_values !== "[]") {
              return d;
            }
          })).enter().append("circle").attr("cx", function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated));
          }).attr("cy", function(d) {
            return self.axes.y.scale(self.axes.y.scale.domain()[1] / 2);
          }).attr("r", 3).attr("class", "empty_point").attr("clip-path", "url(#" + self.options.keys.join('-') + '-clip' + ")").on('mouseover', function(d) {
            return self.show_popup('Partial observation', event.pageX, event.pageY);
          }).on('mouseout', function(d) {
            return self.hide_popup();
          });
        case 'range':
          if (self.options.keys.length === 2) {
            self.drawables.data.selectAll(".range.top").data(self.parent_obj.parent_obj.data.raw.filter(function(d) {
              if (d[self.options.keys[0]]) {
                return d;
              }
            })).enter().append("rect").attr({
              'y': function(d) {
                return self.axes.y.scale(d[self.options.keys[0]]);
              },
              'x': function(d) {
                return self.axes.x.scale(self.date_from_string(d.date_terminated)) - (self.style.range.cap.width / 2) + 1;
              },
              'height': self.style.range.cap.height,
              'width': self.style.range.cap.width,
              'class': 'range top',
              'clip-path': 'url(#' + self.options.keys.join('-') + '-clip' + ')'
            }).on('mouseover', function(d) {
              var key, string_to_use, _j, _len1, _ref1;
              string_to_use = '';
              _ref1 = self.options.keys;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                key = _ref1[_j];
                string_to_use += key + ': ' + d[key] + '<br>';
              }
              return self.show_popup('<p>' + string_to_use + '</p>', event.pageX, event.pageY);
            }).on('mouseout', function(d) {
              return self.hide_popup();
            });
            self.drawables.data.selectAll(".range.bottom").data(self.parent_obj.parent_obj.data.raw.filter(function(d) {
              if (d[self.options.keys[1]]) {
                return d;
              }
            })).enter().append("rect").attr({
              'y': function(d) {
                return self.axes.y.scale(d[self.options.keys[1]]);
              },
              'x': function(d) {
                return self.axes.x.scale(self.date_from_string(d.date_terminated)) - (self.style.range.cap.width / 2) + 1;
              },
              'height': self.style.range.cap.height,
              'width': self.style.range.cap.width,
              'class': 'range bottom',
              'clip-path': 'url(#' + self.options.keys.join('-') + '-clip' + ')'
            }).on('mouseover', function(d) {
              var key, string_to_use, _j, _len1, _ref1;
              string_to_use = '';
              _ref1 = self.options.keys;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                key = _ref1[_j];
                string_to_use += key + ': ' + d[key] + '<br>';
              }
              return self.show_popup('<p>' + string_to_use + '</p>', event.pageX, event.pageY);
            }).on('mouseout', function(d) {
              return self.hide_popup();
            });
            return self.drawables.data.selectAll(".range.extent").data(self.parent_obj.parent_obj.data.raw.filter(function(d) {
              if (d[self.options.keys[0]] && d[self.options.keys[1]]) {
                return d;
              }
            })).enter().append("rect").attr({
              'y': function(d) {
                return self.axes.y.scale(d[self.options.keys[0]]);
              },
              'x': function(d) {
                return self.axes.x.scale(self.date_from_string(d.date_terminated));
              },
              'height': function(d) {
                return self.axes.y.scale(d[self.options.keys[1]]) - self.axes.y.scale(d[self.options.keys[0]]);
              },
              'width': self.style.range.width,
              'class': 'range extent',
              'clip-path': 'url(#' + self.options.keys.join('-') + '-clip' + ')'
            }).on('mouseover', function(d) {
              var key, string_to_use, _j, _len1, _ref1;
              string_to_use = '';
              _ref1 = self.options.keys;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                key = _ref1[_j];
                string_to_use += key + ': ' + d[key] + '<br>';
              }
              return self.show_popup('<p>' + string_to_use + '</p>', event.pageX, event.pageY);
            }).on('mouseout', function(d) {
              return self.hide_popup();
            });
          } else {
            throw new Error('Cannot plot ranged graph with ' + self.options.keys.length + 'data points');
          }
        case 'star':
          return console.log('star');
        case 'pie':
          return console.log('pie');
        case 'sparkline':
          return console.log('sparkline');
        default:
          throw new Error('no graph style defined');
      }
    };

    NHGraph.prototype.redraw = function(parent_obj) {
      var self;
      self = this;
      self.axes.obj.select('.x.axis').call(self.axes.x.axis);
      self.axes.obj.select('.y.axis').call(self.axes.y.axis);
      this.axes.obj.selectAll(".x.axis g text").each(function(d) {
        var el, i, tspan, word, words, _i, _len;
        el = nh_graphs.select(this);
        words = self.date_to_string(d).split(" ");
        el.text("");
        for (i = _i = 0, _len = words.length; _i < _len; i = ++_i) {
          word = words[i];
          tspan = el.append("tspan").text(word);
          if (i > 0) {
            tspan.attr("x", 0).attr("dy", "15");
          }
        }
        return el.attr("y", "-" + (words.length * self.style.axis_label_text_height + self.style.axis_label_text_height));
      });
      self.drawables.background.obj.selectAll('.normal').attr({
        'width': self.axes.x.scale.range()[1],
        'y': function(d) {
          return self.axes.y.scale(d.max);
        },
        'height': function(d) {
          return self.axes.y.scale(d.min) - (self.axes.y.scale(d.max));
        }
      });
      self.drawables.background.obj.selectAll('.label').attr({
        'x': self.axes.x.scale.range()[1] + self.style.label_text_height
      });
      self.drawables.background.obj.selectAll('.measurement').attr({
        'x': self.axes.x.scale.range()[1] + self.style.label_text_height
      });
      self.drawables.background.obj.selectAll(".grid.vertical").data(self.axes.x.scale.ticks()).attr('x1', function(d) {
        return self.axes.x.scale(d);
      }).attr('x2', function(d) {
        return self.axes.x.scale(d);
      });
      self.drawables.background.obj.selectAll('.range').attr('width', self.axes.x.scale.range()[1]).attr({
        'y': function(d) {
          return self.axes.y.scale(d.e) - 1;
        }
      }).attr({
        'height': function(d) {
          return self.axes.y.scale(d.s) - (self.axes.y.scale(d.e) - 1);
        }
      });
      self.drawables.background.obj.selectAll('.grid.horizontal').data(self.axes.y.scale.ticks()).attr('x2', self.axes.x.scale.range()[1]).attr('y1', function(d) {
        return self.axes.y.scale(d);
      }).attr('y2', function(d) {
        return self.axes.y.scale(d);
      });
      self.obj.selectAll('.clip').selectAll('rect').attr('width', self.axes.x.scale.range()[1]);
      switch (self.style.data_style) {
        case 'stepped':
        case 'linear':
          self.drawables.data.selectAll('.path').attr("d", self.drawables.area);
          self.drawables.data.selectAll('.point').attr('cx', function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated));
          }).attr('cy', function(d) {
            return self.axes.y.scale(d[self.options.keys[0]]);
          });
          break;
        case 'range':
          self.drawables.data.selectAll('.range.top').attr('x', function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated)) - (self.style.range.cap.width / 2) + 1;
          }).attr({
            'y': function(d) {
              return self.axes.y.scale(d[self.options.keys[0]]);
            }
          });
          self.drawables.data.selectAll('.range.bottom').attr('x', function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated)) - (self.style.range.cap.width / 2) + 1;
          }).attr({
            'y': function(d) {
              return self.axes.y.scale(d[self.options.keys[1]]);
            }
          });
          self.drawables.data.selectAll('.range.extent').attr('x', function(d) {
            return self.axes.x.scale(self.date_from_string(d.date_terminated));
          }).attr({
            'y': function(d) {
              return self.axes.y.scale(d[self.options.keys[0]]);
            }
          }).attr({
            'height': function(d) {
              return self.axes.y.scale(d[self.options.keys[1]]) - self.axes.y.scale(d[self.options.keys[0]]);
            }
          });
          break;
        case 'star':
          console.log('star');
          break;
        case 'pie':
          console.log('pie');
          break;
        case 'sparkline':
          console.log('sparkline');
          break;
        default:
          throw new Error('no graph style defined');
      }
    };

    return NHGraph;

  })();

  if (!window.NH) {
    window.NH = {};
  }

  window.NH.NHGraph = NHGraph;

  NHTable = (function() {
    function NHTable() {
      this.redraw = __bind(this.redraw, this);
      this.draw = __bind(this.draw, this);
      this.init = __bind(this.init, this);
      this.leading_zero = __bind(this.leading_zero, this);
      this.date_to_string = __bind(this.date_to_string, this);
      this.date_from_string = __bind(this.date_from_string, this);
      this.range = null;
      this.keys = new Array();
      this.obj = null;
      this.header_row = null;
      this.data_rows = null;
    }

    NHTable.prototype.date_from_string = function(date_string) {
      return new Date(date_string);
    };

    NHTable.prototype.date_to_string = function(date) {
      var days;
      days = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"];
      return days[date.getDay()] + " " + +date.getDate() + '/' + this.leading_zero(date.getMonth() + 1) + "/" + this.leading_zero(date.getFullYear()) + " " + this.leading_zero(date.getHours()) + ":" + this.leading_zero(date.getMinutes());
    };

    NHTable.prototype.leading_zero = function(date_element) {
      return ("0" + date_element).slice(-2);
    };

    NHTable.prototype.init = function(parent_obj) {
      var header, key, _i, _len, _ref;
      this.parent_obj = parent_obj;
      this.obj = nh_graphs.select(parent_obj.parent_obj.el).append('table');
      this.obj.attr('class', 'nhtable');
      this.range = [parent_obj.axes.x.min, parent_obj.axes.x.max];
      header = ['Date'];
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        header.push(key);
      }
      this.header_row = this.obj.append('thead').append('tr');
      this.header_row.selectAll('th').data(header).enter().append('th').text(function(d) {
        return d;
      });
      this.data_rows = this.obj.append('tbody');
    };

    NHTable.prototype.draw = function(parent_obj) {
      var key, keys, self, _i, _len, _ref;
      self = this;
      keys = ['date_terminated'];
      _ref = self.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        keys.push(key);
      }
      self.data_rows.selectAll('tr').data(function() {
        var data, data_map, data_to_use;
        data_map = self.parent_obj.parent_obj.data.raw.map(function(row) {
          if (self.date_from_string(row['date_terminated']) >= self.range[0] && self.date_from_string(row['date_terminated']) <= self.range[1]) {
            return keys.map(function(column) {
              return {
                column: column,
                value: row[column]
              };
            });
          }
        });
        data_to_use = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = data_map.length; _j < _len1; _j++) {
            data = data_map[_j];
            if (data != null) {
              _results.push(data);
            }
          }
          return _results;
        })();
        return data_to_use;
      }).enter().append('tr').selectAll('td').data(function(d) {
        return d;
      }).enter().append('td').text(function(d) {
        return d.value;
      });
    };

    NHTable.prototype.redraw = function(parent_obj) {
      var key, keys, self, _i, _len, _ref;
      self = this;
      keys = ['date_terminated'];
      _ref = self.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        keys.push(key);
      }
      self.data_rows.selectAll('tr').remove();
      self.data_rows.selectAll('tr').data(function() {
        var data, data_map, data_to_use;
        data_map = self.parent_obj.parent_obj.data.raw.map(function(row) {
          if (self.date_from_string(row['date_terminated']) >= self.range[0] && self.date_from_string(row['date_terminated']) <= self.range[1]) {
            return keys.map(function(column) {
              return {
                column: column,
                value: row[column]
              };
            });
          }
        });
        data_to_use = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = data_map.length; _j < _len1; _j++) {
            data = data_map[_j];
            if (data != null) {
              _results.push(data);
            }
          }
          return _results;
        })();
        return data_to_use;
      }).enter().append('tr').selectAll('td').data(function(d) {
        return d;
      }).enter().append('td').text(function(d) {
        return d.value;
      });
    };

    return NHTable;

  })();

  if (!window.NH) {
    window.NH = {};
  }

  window.NH.NHTable = NHTable;

}).call(this);
