// Generated by CoffeeScript 1.8.0
var NHMobileForm,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NHMobileForm = (function(_super) {
  __extends(NHMobileForm, _super);

  function NHMobileForm() {
    this.submit = __bind(this.submit, this);
    this.trigger_actions = __bind(this.trigger_actions, this);
    this.validate = __bind(this.validate, this);
    var input, self, _fn, _i, _len, _ref, _ref1;
    this.form = (_ref = document.getElementsByTagName('form')) != null ? _ref[0] : void 0;
    this.form_timeout = 10 * 1000;
    self = this;
    NHMobileForm.__super__.constructor.call(this);
    _ref1 = this.form.elements;
    _fn = function() {
      switch (input.localName) {
        case 'input':
          switch (input.type) {
            case 'number':
              return input.addEventListener('change', self.validate);
            case 'submit':
              return input.addEventListener('click', self.submit);
          }
          break;
        case 'select':
          return input.addEventListener('change', self.trigger_actions);
      }
    };
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      input = _ref1[_i];
      _fn();
    }
    document.addEventListener('form_timeout', function(event) {
      return console.log('oh noes the form timed out');
    });
    this.timeout_func = function() {
      var timeout;
      timeout = new CustomEvent('form_timeout', {
        'detail': 'form timed out'
      });
      return document.dispatchEvent(timeout);
    };
    window.form_timeout = setTimeout(window.timeout_func, this.form_timeout);
  }

  NHMobileForm.prototype.validate = function(event) {
    var container_el, criteria, error_el, input, max, min, other_input, value, _ref;
    event.preventDefault();
    clearTimeout(window.form_timeout);
    window.form_timeout = setTimeout(this.timeout_func, this.form_timeout);
    input = event.srcElement;
    container_el = input.parentNode.parentNode;
    error_el = container_el.getElementsByClassName('input-body')[0].getElementsByClassName('errors')[0];
    value = parseFloat(input.value);
    min = parseFloat(input.min);
    max = parseFloat(input.max);
    container_el.classList.remove('error');
    error_el.innerHTML = '';
    if (input.step === '1' && value % 1 !== 0) {
      container_el.classList.add('error');
      error_el.innerHTML = 'Must be whole number';
      return;
    }
    if (value < min) {
      container_el.classList.add('error');
      error_el.innerHTML = 'Input too low';
      return;
    }
    if (value > max) {
      container_el.classList.add('error');
      error_el.innerHTML = 'Input too high';
      return;
    }
    if (input.getAttribute('data-validation')) {
      criteria = eval(input.getAttribute('data-validation'))[0];
      other_input = (_ref = document.getElementById(criteria[1])) != null ? _ref.value : void 0;
      if (other_input && !eval(value + ' ' + criteria[0] + ' ' + other_input)) {
        container_el.classList.add('error');
        error_el.innerHTML = 'Input must be ' + criteria[0] + ' ' + criteria[1];
      }
    }
  };

  NHMobileForm.prototype.trigger_actions = function(event) {
    event.preventDefault();
    clearTimeout(window.form_timeout);
    window.form_timeout = setTimeout(this.timeout_func, this.form_timeout);
    return console.log('trigger');
  };

  NHMobileForm.prototype.submit = function(event) {
    event.preventDefault();
    clearTimeout(window.form_timeout);
    window.form_timeout = setTimeout(this.timeout_func, this.form_timeout);
    return console.log('submit');
  };

  return NHMobileForm;

})(NHMobile);

if (!window.NH) {
  window.NH = {};
}

if (typeof window !== "undefined" && window !== null) {
  window.NH.NHMobileForm = NHMobileForm;
}
